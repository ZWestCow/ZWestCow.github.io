<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Z&#39;s Blog</title>
  
  <subtitle>emm..ye..I don&#39;t know.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://zwestcow.github.io/"/>
  <updated>2018-07-08T20:54:22.991Z</updated>
  <id>https://zwestcow.github.io/</id>
  
  <author>
    <name>ZWestCow</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>拓展欧几里得</title>
    <link href="https://zwestcow.github.io/%E6%8B%93%E5%B1%95%E6%AC%A7%E5%87%A0%E9%87%8C%E5%BE%97.html"/>
    <id>https://zwestcow.github.io/拓展欧几里得.html</id>
    <published>2018-07-08T19:22:12.000Z</published>
    <updated>2018-07-08T20:54:22.991Z</updated>
    
    <content type="html"><![CDATA[<p>拓展欧几里得是基于欧几里得算法的，在数论中算比较基础的一块了，那么今天就来讲一讲它。</p><a id="more"></a><h2 id="前置技能"><a href="#前置技能" class="headerlink" title="前置技能"></a>前置技能</h2><hr><ol><li><p>欧几里得算法</p><p>就是GCD，辗转相除法求最大公约数，数论中没有比这个更简单的了。很多人都会想到，就像高斯消元一样，这么叫不过是因为他们出生比较早，当然，死的也比较早。</p><p>如果还有不懂，自行百度。</p></li><li><p>裴蜀定理</p><p>裴蜀定理是一个关于最大公约数的定理，说明了对任何整数a、b和它们的最大公约数d，关于未知数x和y的线性丢番图方程<del>看不懂就当我没说</del>，大概意思如下：</p><blockquote><p>ax + by = m </p></blockquote><p>有解当且仅当m是d的倍数 （d为a、b最大公约数总看得懂了吧）</p></li></ol><h2 id="基本事实"><a href="#基本事实" class="headerlink" title="基本事实"></a>基本事实</h2><hr><h3 id="所求"><a href="#所求" class="headerlink" title="所求"></a>所求</h3><p>拓展欧几里得求的是：已知 <code>ax + by = m</code> ，求一组整数解(x,y)（a,b,c均为整数 ）。</p><h3 id="简化"><a href="#简化" class="headerlink" title="简化"></a>简化</h3><p>由裴蜀定理可得：令 <code>ax + by = m</code>简化为 <code>ax + by = c</code> (反正m为c倍数)。</p><p>还可以得到另外一个结论，也挺有用 ：<code>ax + by = 1</code>有整数解当且仅当GCD(a,b)=1（即a与b互质） </p><h2 id="推导求解"><a href="#推导求解" class="headerlink" title="推导求解"></a>推导求解</h2><hr><ol><li>对(a,b)做辗转相除法直到(c,0) <del>很显然，不是吗</del></li><li>​ 由于c + 0 = c，可以得到此时必有一解(x,y) = (1,0) （事实上y是任意的，只不过为了防止造数据的无脑…你懂的）</li><li>假设现在我们已知<code>bx0 + (a mod b)y0 = c</code>，如何求出ax + by = c的解？（为什么要这么写？参考GCD的过程） </li><li>因为<code>a mod b</code>比较难操作，所以要先将上式改写为<code>bx0 + (a – [a/b] * b)y0 = c</code>(形如<code>a mod b</code>的式子，一般来说在推导过程中都要化为<code>a – [a/b] * b</code>)</li><li>在做GCD时递归即可</li></ol><h2 id="上代码"><a href="#上代码" class="headerlink" title="上代码"></a>上代码</h2><hr><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> a,b;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ANS</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> x,y;</span><br><span class="line">&#125;ans;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!y) &#123;ans.x=<span class="number">1</span>;ans.y=<span class="number">0</span>;&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">gcd(y,x%y);</span><br><span class="line"><span class="keyword">int</span> t=ans.x;</span><br><span class="line">ans.x=ans.y;</span><br><span class="line">ans.y=t-((<span class="keyword">int</span>)(x/y))*ans.y;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;a,&amp;b);</span><br><span class="line">gcd(a,b);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>,ans.x,ans.y);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>顺便给一个Python版的代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ANS</span>:</span></span><br><span class="line">    x=<span class="number">0</span></span><br><span class="line">    y=<span class="number">0</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.x=<span class="number">0</span></span><br><span class="line">        self.y=<span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gcd</span><span class="params">(x,y)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> ans</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> y:</span><br><span class="line">        ans.x=<span class="number">1</span></span><br><span class="line">        ans.y=<span class="number">0</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        gcd(y,x%y)</span><br><span class="line">        t=ans.x</span><br><span class="line">        ans.x=ans.y</span><br><span class="line">        ans.y=t-(int(x/y))*ans.y</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ans=ANS()</span><br><span class="line">a=<span class="number">0</span></span><br><span class="line">b=<span class="number">0</span></span><br><span class="line">a,b = [int(j) <span class="keyword">for</span> j <span class="keyword">in</span> raw_input().split()]</span><br><span class="line">gcd(a,b)</span><br><span class="line"><span class="keyword">print</span> str(ans.x)+<span class="string">' '</span>+str(ans.y)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;拓展欧几里得是基于欧几里得算法的，在数论中算比较基础的一块了，那么今天就来讲一讲它。&lt;/p&gt;
    
    </summary>
    
      <category term="数论" scheme="https://zwestcow.github.io/categories/arithmetical/"/>
    
    
      <category term="数论" scheme="https://zwestcow.github.io/tags/arithmetical/"/>
    
  </entry>
  
  <entry>
    <title>求任意多边形面积</title>
    <link href="https://zwestcow.github.io/%E6%B1%82%E4%BB%BB%E6%84%8F%E5%A4%9A%E8%BE%B9%E5%BD%A2%E9%9D%A2%E7%A7%AF.html"/>
    <id>https://zwestcow.github.io/求任意多边形面积.html</id>
    <published>2018-06-22T10:26:42.000Z</published>
    <updated>2018-06-23T09:33:03.906Z</updated>
    
    <content type="html"><![CDATA[<p>其实求多边形面积有许多的方法，这里介绍一个计算几何的方法，比较神奇，只有O(n)的复杂度。</p><a id="more"></a><p>说道计算几何中的神奇方法，就不得不说到向量（又叫矢量，不过这个名词有歧义）。</p><h2 id="向量（大佬跳过）"><a href="#向量（大佬跳过）" class="headerlink" title="向量（大佬跳过）"></a>向量（大佬跳过）</h2><hr><p>其实，像这种概念问题，大家都可以去问一下<del>我</del>度娘，还挺详细的。</p><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>数学中的向量只有两个值，一个方向，一个大小，于是不论怎么平移，它不会有任何改变。不过，这样子表示向量的话，它的用处就太小了。但是，当我们让向量都从一点出发的话，它的意义就很多了，能够做一些奇奇怪怪的事情。所以在计算机算法里，其中有这样一个表示向量的方法：一般都默认一个向量是从原点出发的，把它另一个端点的坐标记下来。</p><p>向量有几个基本运算：加、减、点积、叉积。关于其数学计算方法（计算机中次要）以及几何意义（非常重要），大家请自行去百度吧。</p><p>接下来会简单介绍一下以上述记录向量的方法进行基本运算</p><h3 id="加减法"><a href="#加减法" class="headerlink" title="加减法"></a>加减法</h3><p>加减其实特简单，了解一下基本性质之后（或者百度向量后，看一下加减法的图示，这里就懒一点，不搬运了），特别好推，绝对秒出公式。</p><h3 id="点积"><a href="#点积" class="headerlink" title="点积"></a>点积</h3><p>两个向量的叉积只会返回一个值，而不是一个向量。其几何意义差不多是下面这样 ,有一个向量 $\vec{a}$ 为BC，还有一个向量 $\vec{b}$为BC。那么，$\vec{a}$与点积$\vec{b}$为$S\Delta ABCD$ ,就是$Ax\cdot By-Ay\cdot Bx$，（注意，不符合交换律）</p><p><img src="http://t1.aixinxi.net/o_1cgjlenojg4n1hue14t4la0k2qa.png-w.jpg" alt=""></p><h3 id="叉积"><a href="#叉积" class="headerlink" title="叉积"></a>叉积</h3><p>叉积返回值是一个向量，大小为点积，方向符合右手螺旋定理，垂直于另外两向量，也就是说叉积运算是三维中的概念（不符合交换律） </p><h2 id="计算面积"><a href="#计算面积" class="headerlink" title="计算面积"></a>计算面积</h2><hr><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>比如下面这个：</p><p><img src="http://t1.aixinxi.net/o_1cgjm939p1hfdbubgqu88217iva.png-w.jpg" alt=""></p><p>相信一些眼尖的读者已经发现了，这个多边形上的点都连了一条到原点的线段，相邻两点间的连线与两点和原点的连线构成了8个三角形（多边形共八条线段），如果把其中一些三角形的面积加起来，再减掉另一些三角形的面积，就是所求多边形的面积！而且与原点位置什么都无关！</p><p>所以我们只要判断哪些三角形加上，哪些三角形减去即可！至于怎么判断，相信我，向量会自动帮你做这件事。</p><p>下面上代码</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>先上个C++的吧</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//输入必须是将点按顺序输入，顺时还是逆时程序会处理的 </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">double</span> ans;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> x,y;</span><br><span class="line">&#125;a[<span class="number">1000000</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> ret=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line"><span class="keyword">while</span>(ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>)&#123;<span class="keyword">if</span>(ch==<span class="string">'-'</span>)f=-f;ch=getchar();&#125;</span><br><span class="line"><span class="keyword">while</span>(ch&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>) ret=ret*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line"><span class="keyword">return</span> ret*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">n=read();<span class="comment">//共n个点 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) a[i]=(Point)&#123;read(),read()&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)</span><br><span class="line">ans+=(<span class="keyword">double</span>)(a[i].x*a[i<span class="number">-1</span>].y-a[i].y*a[i<span class="number">-1</span>].x)<span class="comment">/*记得求平行四边形面积公式吗*/</span>/<span class="number">2.0</span>;</span><br><span class="line"><span class="comment">//求三角形面积。全加起来就好了，因为...面积有方向（正负性），自己会消掉的 </span></span><br><span class="line">ans+=(<span class="keyword">double</span>)(a[<span class="number">1</span>].x*a[n].y-a[<span class="number">1</span>].y*a[n].x)/<span class="number">2.0</span>;<span class="comment">//第1和第n个点单独处理 </span></span><br><span class="line"><span class="keyword">if</span>(ans&lt;<span class="number">0.0</span>) ans=-ans;<span class="comment">//顺时针与逆时针输入结果互为相反数 </span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lf"</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>好长时间没写Python了，几乎忘光了，没事干就写了一个Python版的代码（可能非常啰嗦），就不挂注释了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">x=[<span class="number">1</span>]</span><br><span class="line">y=[<span class="number">1</span>]</span><br><span class="line">ans=<span class="number">0</span></span><br><span class="line">n=<span class="number">0</span></span><br><span class="line">n=input()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,n+<span class="number">1</span>):</span><br><span class="line">    x.append(<span class="number">0</span>)</span><br><span class="line">    y.append(<span class="number">0</span>)</span><br><span class="line">    x[i],y[i] = [int(j) <span class="keyword">for</span> j <span class="keyword">in</span> raw_input().split()]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>,n+<span class="number">1</span>):</span><br><span class="line">    ans=ans+(float)(x[i]*y[i<span class="number">-1</span>]-x[i<span class="number">-1</span>]*y[i])/<span class="number">2.0</span></span><br><span class="line">ans=ans+(float)(x[<span class="number">1</span>]*y[n]-x[n]*y[<span class="number">1</span>])/<span class="number">2.0</span></span><br><span class="line"><span class="keyword">if</span> ans&lt;<span class="number">0</span>:</span><br><span class="line">    ans=-ans</span><br><span class="line"><span class="keyword">print</span> ans</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;其实求多边形面积有许多的方法，这里介绍一个计算几何的方法，比较神奇，只有O(n)的复杂度。&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="https://zwestcow.github.io/categories/algorithm/"/>
    
      <category term="计算几何" scheme="https://zwestcow.github.io/categories/algorithm/computgeome/"/>
    
    
      <category term="算法" scheme="https://zwestcow.github.io/tags/algorithm/"/>
    
      <category term="计算几何" scheme="https://zwestcow.github.io/tags/computgeome/"/>
    
  </entry>
  
  <entry>
    <title>用Hexo搭建自己的网站-添加主题</title>
    <link href="https://zwestcow.github.io/%E7%94%A8hexo%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E7%BD%91%E7%AB%99-%E6%B7%BB%E5%8A%A0%E4%B8%BB%E9%A2%98.html"/>
    <id>https://zwestcow.github.io/用hexo搭建自己的网站-添加主题.html</id>
    <published>2018-06-09T03:33:20.000Z</published>
    <updated>2018-06-09T09:52:23.493Z</updated>
    
    <content type="html"><![CDATA[<p> 如标题所述</p><a id="more"></a><p>hexo是一个平台，有许多人为其开发了主题，若想要换主题，可以直接去官网<a href="https://hexo.io/themes/找合适的主题。" target="_blank" rel="noopener">https://hexo.io/themes/找合适的主题。</a></p><p>这些主题基本上都是链接在github的开源项目，所以你可能需要先注册一个GitHub账户。</p><p>至于具体操作，每个主题都不一样，功能也不尽相同，安装方法也略有区别，不过开发者应该都配备有详细介绍，大伙自个儿钻研吧（跑）</p><p>另外如果看到了某位大佬（先声明，绝对不包括我）的博客，觉得好，想要模（zhan）仿（wei）一（ji）个（you），可以关注一下这个博客的右下角，基本上可以找到这个主题名字，还有GitHub贮存库的链接。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt; 如标题所述&lt;/p&gt;
    
    </summary>
    
      <category term="blog" scheme="https://zwestcow.github.io/categories/blog/"/>
    
    
      <category term="hexo" scheme="https://zwestcow.github.io/tags/hexo/"/>
    
      <category term="博客" scheme="https://zwestcow.github.io/tags/blogs/"/>
    
  </entry>
  
  <entry>
    <title>高效的单字符串匹配算法Horspool</title>
    <link href="https://zwestcow.github.io/%E9%AB%98%E6%95%88%E7%9A%84%E5%8D%95%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8C%B9%E9%85%8D%E7%AE%97%E6%B3%95Horspool.html"/>
    <id>https://zwestcow.github.io/高效的单字符串匹配算法Horspool.html</id>
    <published>2018-05-31T12:09:22.000Z</published>
    <updated>2018-06-01T10:17:41.765Z</updated>
    
    <content type="html"><![CDATA[<p>在单字符串匹配算法的领域中，有两种为人熟知的算法：KMP（<del>看毛片</del>）和BM算法，这两种算法虽然经典，不过难码。实际上许多简单的算法速度也是飞快。于是就让我们来认识一下BM的简化版——Horspool，效率比KMP、BM都快，还好理解。</p><a id="more"></a><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><hr><p>先来定义一些东西（<code>S，原串；P，匹配串；‘|’匹配成功；‘#’匹配失败</code>）</p><p>Horspool看是否匹配时是从后往前扫描的，若全部匹配，则找到一个可匹配的方案<del>free话</del>，若有一个不匹配，则当前方案不存在<del>free话真多</del>。这时就要分情况讨论了。</p><p>情况一：</p><p>在下例情况中，称S中的‘d’为关键字符，就是P最后一个字符在S中的匹配字符。若P中除尾字符外没有与关键字符相同的字符，<del>显然</del>应该将P向后推len(P)个位置。</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">S - *****bcd*******</span><br><span class="line">         <span class="comment">#||</span></span><br><span class="line">P -  <span class="number">2333</span>acd</span><br><span class="line">  <span class="comment">--&gt;       2333acd</span></span><br></pre></td></tr></table></figure><p>情况二：</p><p>若P中除尾字符外有与关键字符相同的字符，<del>显然</del>应该将P向后推到P中最靠右的关键字符与S中的关键字符对齐。</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">S - *****bcd*******</span><br><span class="line">         <span class="comment">#||</span></span><br><span class="line">P -  <span class="number">233</span>dacd</span><br><span class="line">  <span class="comment">--&gt;   233dacd</span></span><br></pre></td></tr></table></figure><p>自我感觉比BM好多了，简洁高效。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><hr><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//实现查找S中有多少个与P完全相同的子串 </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">char</span> S[<span class="number">1000</span>],P[<span class="number">1000</span>];</span><br><span class="line"><span class="keyword">int</span> ans,n,m;</span><br><span class="line"><span class="function"><span class="keyword">int</span>* <span class="title">HorspoolTable</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *P)</span></span>&#123;  </span><br><span class="line">    <span class="keyword">int</span> n = <span class="built_in">strlen</span>(P);  </span><br><span class="line">    <span class="keyword">int</span>* ht=<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">256</span>];  <span class="comment">//ht：Horspool的表，255为ASCII上限 </span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">256</span>;i++)  ht[i]=n;<span class="comment">//P中找不到这个字符就后移n位 </span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n<span class="number">-1</span><span class="comment">/*不包括P中的尾字符*/</span>;i++)  ht[(<span class="keyword">int</span>)P[i]]=n-i<span class="number">-1</span>;  </span><br><span class="line">    <span class="keyword">return</span> ht;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Horspool</span><span class="params">()</span></span>&#123;  </span><br><span class="line">    <span class="keyword">int</span>* ht=HorspoolTable(P);  </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n-m;)&#123;  </span><br><span class="line">    <span class="keyword">int</span> k=n<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span> (k=m<span class="number">-1</span>;k&gt;=<span class="number">0</span>&amp;&amp;S[i+k]==P[k];k--);  </span><br><span class="line">        <span class="keyword">if</span> (k==<span class="number">-1</span>)  ans++; <span class="comment">//全部匹配，ans++ </span></span><br><span class="line">        i=i+ht[(<span class="keyword">int</span>)S[i+m<span class="number">-1</span>]]; <span class="comment">//否则后移对应位数 </span></span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">delete</span> []ht;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s%s"</span>,S,P);</span><br><span class="line">n=<span class="built_in">strlen</span>(S);  </span><br><span class="line">    m=<span class="built_in">strlen</span>(P);  </span><br><span class="line">Horspool();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在单字符串匹配算法的领域中，有两种为人熟知的算法：KMP（&lt;del&gt;看毛片&lt;/del&gt;）和BM算法，这两种算法虽然经典，不过难码。实际上许多简单的算法速度也是飞快。于是就让我们来认识一下BM的简化版——Horspool，效率比KMP、BM都快，还好理解。&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="https://zwestcow.github.io/categories/algorithm/"/>
    
    
      <category term="算法" scheme="https://zwestcow.github.io/tags/algorithm/"/>
    
      <category term="字符串" scheme="https://zwestcow.github.io/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
  </entry>
  
  <entry>
    <title>用Hexo搭建自己的网站-写文章</title>
    <link href="https://zwestcow.github.io/%E7%94%A8hexo%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E7%BD%91%E7%AB%99-%E5%86%99%E6%96%87%E7%AB%A0.html"/>
    <id>https://zwestcow.github.io/用hexo搭建自己的网站-写文章.html</id>
    <published>2018-05-26T07:18:19.000Z</published>
    <updated>2018-05-26T08:00:06.087Z</updated>
    
    <content type="html"><![CDATA[<p>如标题所述</p><a id="more"></a><p>在根目录下输入<code>hexo new &quot;title&quot;</code>命令，在source/_post/文件夹下会出现一个”title.md”</p><p>打开然后就可以编辑了，语法是markdown。</p><p><code>&lt;!-- more --&gt;</code>用来分割梗概与正文。</p><p><code>categories</code>与<code>tags</code>分别是分类与标签，以tags为例语法是<code>tags: [tag1,tag2,tag3...tagn]</code></p><p>放个例子下来自己理解</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: example</span><br><span class="line">date: 2018-05-01 16:32:31</span><br><span class="line">tags: [示例]</span><br><span class="line">---</span><br><span class="line">测试用页面</span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- more --&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="section"># 测试一</span></span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">$E=mc^2$ </span><br><span class="line"></span><br><span class="line">​<span class="code">``` python</span></span><br><span class="line"><span class="code">import pyqt</span></span><br><span class="line"><span class="code">​</span></span><br></pre></td></tr></table></figure><p><del>删除线</del><br><code>`</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如标题所述&lt;/p&gt;
    
    </summary>
    
      <category term="blog" scheme="https://zwestcow.github.io/categories/blog/"/>
    
    
      <category term="hexo" scheme="https://zwestcow.github.io/tags/hexo/"/>
    
      <category term="博客" scheme="https://zwestcow.github.io/tags/blogs/"/>
    
  </entry>
  
  <entry>
    <title>用Hexo搭建自己的网站-环境配置</title>
    <link href="https://zwestcow.github.io/%E7%94%A8hexo%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E7%BD%91%E7%AB%99-%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE.html"/>
    <id>https://zwestcow.github.io/用hexo搭建自己的网站-环境配置.html</id>
    <published>2018-05-20T06:38:59.000Z</published>
    <updated>2018-05-20T07:42:43.739Z</updated>
    
    <content type="html"><![CDATA[<p>介绍一下如何用hexo写自己的网站</p><a id="more"></a><p>细心的童鞋想必已经发现了我的博客右下角 <code>hexo</code> 字样，这其实就是我制作网站的工具。</p><p>基本环境搭建步骤如下：</p><p>node.js -&gt; Git -&gt; hexo -&gt; 测试运行</p><h1 id="node"><a href="#node" class="headerlink" title="node"></a>node</h1><hr><p>大家可以去<a href="https://nodejs.org/en/" target="_blank" rel="noopener">官网</a>下载，安装时无脑点确定即可~</p><h1 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h1><hr><p>一样，去<a href="https://git-scm.com/download/win" target="_blank" rel="noopener">官网</a>下载，上面 <code>click here to download manually.</code> 按钮好像没用，点下面的选项下载。一样无脑确定</p><h1 id="hexo"><a href="#hexo" class="headerlink" title="hexo"></a>hexo</h1><hr><p>当前面都装好了后，打开cmd,键入<code>npm install -g hexo-cli</code>就完成了。</p><h1 id="创建你的第一个测试页面"><a href="#创建你的第一个测试页面" class="headerlink" title="创建你的第一个测试页面"></a>创建你的第一个测试页面</h1><hr><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p>先随便创建一个文件夹，最好直接在磁盘下面，不要套在文件夹下面，不然以后可能会有意想不到的麻烦。<code>cd</code>到你创建的文件夹下，输入以下命令：<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo init  # hexo会在目标文件夹建立网站所需要的所有文件</span><br><span class="line">npm install  # 安装依赖包</span><br></pre></td></tr></table></figure></p><h2 id="本地启动"><a href="#本地启动" class="headerlink" title="本地启动"></a>本地启动</h2><p>输入以下命令：<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g # 等同于hexo generate，生成静态文件</span><br><span class="line">hexo s # 等同于hexo server，在本地服务器运行</span><br></pre></td></tr></table></figure></p><p>之后打开浏览器并输入IP地址 <a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a> 查看.<br>如果出错了，在<code>cmd</code>中输入以下命令：<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo s -p <span class="number">4001</span> # 用<span class="number">4001</span>端口打开，而不是默认的<span class="number">4000</span></span><br></pre></td></tr></table></figure></p><p>之后打开浏览器并输入IP地址 <a href="http://localhost:4001" target="_blank" rel="noopener">http://localhost:4001</a> 查看.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;介绍一下如何用hexo写自己的网站&lt;/p&gt;
    
    </summary>
    
      <category term="blog" scheme="https://zwestcow.github.io/categories/blog/"/>
    
    
      <category term="hexo" scheme="https://zwestcow.github.io/tags/hexo/"/>
    
      <category term="博客" scheme="https://zwestcow.github.io/tags/blogs/"/>
    
  </entry>
  
  <entry>
    <title>基础二分图的最大匹配问题</title>
    <link href="https://zwestcow.github.io/%E5%9F%BA%E7%A1%80%E4%BA%8C%E5%88%86%E5%9B%BE%E7%9A%84%E6%9C%80%E5%A4%A7%E5%8C%B9%E9%85%8D%E9%97%AE%E9%A2%98.html"/>
    <id>https://zwestcow.github.io/基础二分图的最大匹配问题.html</id>
    <published>2018-05-06T12:03:32.000Z</published>
    <updated>2018-05-10T11:53:13.550Z</updated>
    
    <content type="html"><![CDATA[<p>​      标题已经说了，所以有基础的牛们就别想在这篇博客里看到什么有价值的东西。这里的解法是最基础的。</p><blockquote><p>二分图是一种可以把图中的点分为两个不同的集合，且同一集合中不存在任意两个有边联通的点（就算是单向边也不行）的图。</p></blockquote><a id="more"></a><h2 id="基本知识、概念"><a href="#基本知识、概念" class="headerlink" title="基本知识、概念"></a>基本知识、概念</h2><hr><p>​       判断是否存在二分图有一个小技巧，如果有奇数条边的环，那么一定不存在二分图（因为这样就无法完美得分成两个集合）。至于最大匹配，就是选出尽量多的边，任意一个点只能与最多一条选中的的边相连。可以参照下面的图（a）。</p><p>​       可能有人听说过“<code>完美匹配</code>”，就是说所有点都有在另一个集合中对应的点</p><h2 id="同类知识"><a href="#同类知识" class="headerlink" title="同类知识"></a>同类知识</h2><hr><p>​        二分图的最大匹配问题，与另一个同为网络流问题的最大流问题，都有一个“最大”，那么这之间是否有什么关系呢？答案是，真的有！那么现在先来了解一下有关最大流问题的的一些知识：<a href="https://zwestcow.github.io/%E6%9C%80%E5%A4%A7%E6%B5%81%E9%97%AE%E9%A2%98Edmonds-Karp%E7%AE%97%E6%B3%95.html">https://zwestcow.github.io/%E6%9C%80%E5%A4%A7%E6%B5%81%E9%97%AE%E9%A2%98Edmonds-Karp%E7%AE%97%E6%B3%95.html</a> 。链接里的最大流用的也是基本解法。至于网络流是什么？也在链接里。</p><p>​        之前说过二分图最大匹配与最大流有点关系，其实思索一下就会发现，人为主动的在图中添加一个s点与一个t点，然后将左边的点都与s点建立一条权值为1的边，右边的点都与t点建立一条权值为1的边，且所有边都改成从左集合到右集合的有向边，原本图（a）的二分图这就成了图（b），一道经典的最大流问题。 </p><p><img src="http://t1.aixinxi.net/o_1ccqp1cem1pvj19p11tf1or410i4a.png-w.jpg" alt=""></p><h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><hr><p>​    但是由于多增了n条边，复杂度也上去了不少，所以我们就要进行一些优化。</p><p>​    我们可以对增广路稍稍做点修改，但是本质还是一样的。从左开始遍历时按照<code>【遍历了（左→右）-没遍历（右←左）-遍历了（左→右）-……】</code>这个模式走奇数步（这样终点才会在右边的集合）。为什么可以这样优化哪？相信这个问题读者能自己想通，并不是很难。</p><h2 id="模板代码（DFS版）"><a href="#模板代码（DFS版）" class="headerlink" title="模板代码（DFS版）"></a>模板代码（DFS版）</h2><hr><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> max 505  </span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;  </span><br><span class="line"><span class="keyword">int</span> <span class="built_in">map</span>[max][max],p[max],m,n,k,ans; <span class="comment">//存储图 ,邻接矩阵，p数组记录集合2中的点所匹配的点的编号   </span></span><br><span class="line"><span class="keyword">bool</span> vis[max]; <span class="comment">//记录集合2中的每个点是否被搜索过  </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> ret=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line"><span class="keyword">while</span>(ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>)&#123;<span class="keyword">if</span>(ch==<span class="string">'-'</span>)f=-f;ch=getchar();&#125;</span><br><span class="line"><span class="keyword">while</span>(ch&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>) ret=ret*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line"><span class="keyword">return</span>  ret*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> x)</span>  </span>&#123;  </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)  &#123;  </span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">map</span>[x][i]&amp;&amp;!vis[i]<span class="comment">/*保证一个节点只经过一次*/</span>)  &#123;  </span><br><span class="line">            vis[i]=<span class="number">1</span>;  </span><br><span class="line">            <span class="keyword">if</span>(p[i]==<span class="number">0</span>||DFS(p[i]))&#123;  </span><br><span class="line">                p[i]=x;  </span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;    </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getanswer</span><span class="params">()</span>  </span>&#123;  </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) &#123;  </span><br><span class="line">        <span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span>(vis));<span class="comment">//清空上次搜索留下的痕迹 ,以找长度大于1的增广路  </span></span><br><span class="line">        <span class="keyword">if</span>(DFS(i)) ans++;  <span class="comment">//找到增广路，答案就加一 </span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;  </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">    freopen(<span class="string">"ls.in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);  </span><br><span class="line">    <span class="built_in">memset</span>(<span class="built_in">map</span>,<span class="number">0</span>,<span class="keyword">sizeof</span>(<span class="built_in">map</span>));  </span><br><span class="line">    <span class="built_in">memset</span>(p,<span class="number">0</span>,<span class="keyword">sizeof</span>(p));  </span><br><span class="line">    n=read();m=read();k=read();<span class="comment">//A、B集合元素的个数 </span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=k;i++)&#123;</span><br><span class="line">    <span class="keyword">int</span> x=read(),y=read();</span><br><span class="line">    <span class="built_in">map</span>[x][y]=<span class="number">1</span>;<span class="comment">//有向路 </span></span><br><span class="line">&#125;</span><br><span class="line">    getanswer();  </span><br><span class="line">    <span class="keyword">if</span>(!ans) <span class="built_in">printf</span>(<span class="string">"No Solution!\n"</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="练习题"><a href="#练习题" class="headerlink" title="练习题"></a>练习题</h2><p>​    附上一道二分图匹配的模板题：Poj3041 <a href="http://poj.org/problem?id=3041" target="_blank" rel="noopener">http://poj.org/problem?id=3041</a> </p><h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h3><p>（大部分翻译来自google，所以看不懂中文是正常的） [手动滑稽]：</p><h4 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h4><p>​                                                                                          <strong>小行星</strong></p><hr><table><thead><tr><th>时间限制： 1000MS</th><th>内存限制： 65536K</th></tr></thead><tbody><tr><td>提交总数： 25001</td><td>通过： 13523</td></tr></tbody></table><h4 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h4><p>贝茜希望通过一个N×N网格（1 &lt;= N &lt;= 500）形状的危险小行星带来驾驶她的飞船。网格包含K个小行星（1 &lt;= K &lt;= 10,000），它们位于网格的格点处。<br>幸运的是，贝茜拥有一个强大的武器，可以消除任意一行或一列中的所有小行星。这种武器非常昂贵，所以她希望少用一些。给定所有小行星的位置，输出贝茜需要射击以消除所有小行星的最少射击次数。</p><h4 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h4><ul><li>第1行：两个整数N和K，由一个空格隔开。 </li><li>第2行… K + 1行：每行包含两个空格分隔的整数R和C（1 &lt;= R，C &lt;= N），分别表示小行星的行坐标和列坐标。</li></ul><h4 id="产量"><a href="#产量" class="headerlink" title="产量"></a>产量</h4><ul><li>第1行：表示贝茜必须射击的最少次数的整数。</li></ul><h4 id="示例输入"><a href="#示例输入" class="headerlink" title="示例输入"></a>示例输入</h4><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">3 </span><span class="number">4</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">1</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">3</span></span><br><span class="line"><span class="symbol">2 </span><span class="number">2</span></span><br><span class="line"><span class="symbol">3 </span><span class="number">2</span></span><br></pre></td></tr></table></figure><h4 id="示例输出"><a href="#示例输出" class="headerlink" title="示例输出"></a>示例输出</h4><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure><h4 id="暗示"><a href="#暗示" class="headerlink" title="暗示"></a>暗示</h4><p>输入详细信息：<br>下图表示数据，其中“X”是小行星和“.”是空的格子：<br><code>X.X .X. .X.</code> </p><h4 id="输出细节"><a href="#输出细节" class="headerlink" title="输出细节"></a>输出细节</h4><p>贝西可能在第1排开火，破坏（1,1）和（1,3）处的小行星，然后她可能击落第2列以破坏（2,2）和（3,2）处的小行星。 </p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>​        我说过是模板题了。。。</p><p>感谢《算法竞赛_入门经典》的图</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;​      标题已经说了，所以有基础的牛们就别想在这篇博客里看到什么有价值的东西。这里的解法是最基础的。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;二分图是一种可以把图中的点分为两个不同的集合，且同一集合中不存在任意两个有边联通的点（就算是单向边也不行）的图。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="算法" scheme="https://zwestcow.github.io/categories/algorithm/"/>
    
    
      <category term="算法" scheme="https://zwestcow.github.io/tags/algorithm/"/>
    
      <category term="网络流" scheme="https://zwestcow.github.io/tags/internet/"/>
    
  </entry>
  
  <entry>
    <title>最大流问题Edmonds-Karp算法</title>
    <link href="https://zwestcow.github.io/%E6%9C%80%E5%A4%A7%E6%B5%81%E9%97%AE%E9%A2%98Edmonds-Karp%E7%AE%97%E6%B3%95.html"/>
    <id>https://zwestcow.github.io/最大流问题Edmonds-Karp算法.html</id>
    <published>2018-05-01T09:10:53.000Z</published>
    <updated>2018-05-06T13:09:11.530Z</updated>
    
    <content type="html"><![CDATA[<p>   实现最大流有好几种算法，比如Dinic或者ISAP算法，Edmonds-Karp只是其中最好理解的一种算法，它的实现要运用到增广路与BFS，当然也可以用DFS，但效率太低。网络流这东西是用来求从s点到t点（起点为s，终点为t）的流量问题，因为类似网络数据传输，所以叫做网络流。</p><a id="more"></a><h3 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h3><hr><blockquote><p>最大流说简单点就是使从s到t的流量最大。这玩意儿需要注意几个事实（起点为s,终点为t）：<br><strong>每条边都有容量，当前的流量不可以超过流量；从s出来的流量等于流入t的流量；一般情况下点的容量是无限大的；s点与t点的容量无限大</strong></p></blockquote><p>有些东西就简写一下，待会看得懂就行：</p><ol><li><p>容量（c），每条边最大运输量。</p></li><li><p>流量（f），当前用了的运输量。</p></li><li><p>残量网络，即每一条路上容量与流量之差，必须为正数， <strong>若a-&gt;b的c为16，f为10 ，在残量网络中a-&gt;b为6还有一条边，b-&gt;a为10，有两条边！</strong> 因为可以当做b-&gt;a为容量0，流量-11。例如图（a）的残量网络为图（b）。（前一个数为流量，后一个数为容量）</p></li></ol><p><img src="http://t1.aixinxi.net/o_1ccqp1cem1pvj19p11tf1or410i4a.png-w.jpg" alt=""></p><ol start="4"><li>增广路，每次在图中找到一条满足上述基本事实的一条从s到t的路（这里用BFS找），这条路上贡献的流量就是其最小残量，每次找到一条路，就让答案加上最小残量，当没有增广路时，可以证明答案即为最优。</li></ol><h3 id="上代码"><a href="#上代码" class="headerlink" title="上代码"></a>上代码</h3><hr><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 1005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 2147483647</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> ret=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span>  ch=getchar();</span><br><span class="line"><span class="keyword">while</span>(ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>) &#123;<span class="keyword">if</span>(ch==<span class="string">'-'</span>)f=-f;ch=getchar();&#125;</span><br><span class="line"><span class="keyword">while</span>(ch&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>) ret=ret*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line"><span class="keyword">return</span> ret*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span><span class="comment">//用来维护每条边的信息 </span></span><br><span class="line"><span class="keyword">int</span> from,to,cap,flow;</span><br><span class="line">Edge(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> c,<span class="keyword">int</span> f):from(u),to(v),cap(c),flow(f)&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">EdmondsKarp</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> n,m,s,t;<span class="comment">//n:点数，m:边数，s:起点,t:终点 </span></span><br><span class="line"><span class="built_in">vector</span>&lt;Edge&gt; edges;<span class="comment">//边数开两倍（还有反向网络），这里偷一下懒 </span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[maxn];<span class="comment">//领接表，G[i][j]表示点i到延伸出去的第j条边在edges中的位置 </span></span><br><span class="line"><span class="keyword">int</span> a[maxn];<span class="comment">//最小残量，用以增广 </span></span><br><span class="line"><span class="keyword">int</span> p[maxn];<span class="comment">//p[i]表示到达节点i的那条边的编号，因为每次增广只增广一条路径，所以不用开二维 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;<span class="comment">//不多说，初始化 </span></span><br><span class="line">n=read();m=read();s=read();t=read();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) G[i].clear();</span><br><span class="line">edges.clear();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line"><span class="keyword">int</span> from=read(),to=read(),cap=read();</span><br><span class="line">edges.push_back(Edge(from,to,cap,<span class="number">0</span>));</span><br><span class="line">edges.push_back(Edge(to,from,<span class="number">0</span>,<span class="number">0</span>));<span class="comment">//反向网络 </span></span><br><span class="line"><span class="keyword">int</span> k=edges.size();</span><br><span class="line">G[from].push_back(k<span class="number">-2</span>);</span><br><span class="line">G[from].push_back(k<span class="number">-1</span>);  </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Maxflow</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> ret=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line"><span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="keyword">sizeof</span>(a));</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; Q;<span class="comment">//先进先出的队列 </span></span><br><span class="line">Q.push(s);</span><br><span class="line">a[s]=INF;</span><br><span class="line"><span class="keyword">while</span>(!Q.empty())&#123;<span class="comment">//里面就是在BFS </span></span><br><span class="line"><span class="keyword">int</span> x=Q.front();<span class="comment">//取队首 </span></span><br><span class="line">Q.pop();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;G[x].size();i++)&#123;</span><br><span class="line">Edge&amp; e=edges[G[x][i]];</span><br><span class="line"><span class="keyword">if</span>(!a[e.to]<span class="comment">/*判环*/</span>&amp;&amp;e.cap&gt;e.flow)&#123;</span><br><span class="line">p[e.to]=G[x][i];<span class="comment">//记住回去的路 </span></span><br><span class="line">a[e.to]=min(a[x],e.cap-e.flow);<span class="comment">//去最小残量 </span></span><br><span class="line">Q.push(e.to);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(a[t]) <span class="keyword">break</span>;<span class="comment">//此条路已到达t </span></span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">if</span>(!a[t]) <span class="keyword">break</span>;<span class="comment">//没有增广路时，即为最大流 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> u=t;u!=s;u=edges[p[u]].from)&#123;<span class="comment">//借助p数组倒回去给此次找到的增广路上的每条路的流量都加上最小残量a[t] </span></span><br><span class="line">edges[p[u]].flow+=a[t];</span><br><span class="line">edges[p[u]^<span class="number">1</span>].flow-=a[t];<span class="comment">//反向网络也要减掉a[t] </span></span><br><span class="line">&#125;</span><br><span class="line">ret+=a[t];<span class="comment">//答案加上最小残量a[t] </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line">&#125;ans;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">freopen(<span class="string">"ls.in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);</span><br><span class="line">ans.init();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>,ans.Maxflow());</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如有不正之处，欢迎神犇们来喷。 若要未经博主允许随意转载请随便。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;   实现最大流有好几种算法，比如Dinic或者ISAP算法，Edmonds-Karp只是其中最好理解的一种算法，它的实现要运用到增广路与BFS，当然也可以用DFS，但效率太低。网络流这东西是用来求从s点到t点（起点为s，终点为t）的流量问题，因为类似网络数据传输，所以叫做网络流。&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="https://zwestcow.github.io/categories/algorithm/"/>
    
    
      <category term="算法" scheme="https://zwestcow.github.io/tags/algorithm/"/>
    
      <category term="网络流" scheme="https://zwestcow.github.io/tags/internet/"/>
    
  </entry>
  
  <entry>
    <title>Example</title>
    <link href="https://zwestcow.github.io/example.html"/>
    <id>https://zwestcow.github.io/example.html</id>
    <published>2018-05-01T08:32:31.000Z</published>
    <updated>2018-05-01T08:49:31.518Z</updated>
    
    <content type="html"><![CDATA[<p>测试用页面<br><a id="more"></a></p><h1 id="测试一"><a href="#测试一" class="headerlink" title="测试一"></a>测试一</h1><hr><p>$E=mc^2$ </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pyqt</span><br></pre></td></tr></table></figure><p><del>删除线</del></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;测试用页面&lt;br&gt;
    
    </summary>
    
    
      <category term="示例" scheme="https://zwestcow.github.io/tags/example/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://zwestcow.github.io/hello-world.html"/>
    <id>https://zwestcow.github.io/hello-world.html</id>
    <published>2018-05-01T00:33:26.723Z</published>
    <updated>2018-05-01T08:48:36.956Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.<br><a id="more"></a></p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;br&gt;
    
    </summary>
    
    
      <category term="示例" scheme="https://zwestcow.github.io/tags/example/"/>
    
  </entry>
  
</feed>
