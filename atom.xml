<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Z&#39;s Blog</title>
  
  <subtitle>emm..ye..I don&#39;t know.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://zwestcow.github.io/"/>
  <updated>2018-05-01T11:14:02.010Z</updated>
  <id>https://zwestcow.github.io/</id>
  
  <author>
    <name>ZWestCow</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>最大流问题Edmonds-Karp算法</title>
    <link href="https://zwestcow.github.io/%E6%9C%80%E5%A4%A7%E6%B5%81%E9%97%AE%E9%A2%98Edmonds-Karp%E7%AE%97%E6%B3%95.html"/>
    <id>https://zwestcow.github.io/最大流问题Edmonds-Karp算法.html</id>
    <published>2018-05-01T09:10:53.000Z</published>
    <updated>2018-05-01T11:14:02.010Z</updated>
    
    <content type="html"><![CDATA[<p>实现最大流有好几种算法，比如Dinic或者ISAP算法，Edmonds-Karp只是其中最好理解的一种算法，它的实现要运用到增广路与BFS，当然也可以用DFS，但效率太低。网络流这东西是用来求从s点到t点（起点为s，终点为t）的流量问题，因为类似网络数据传输，所以叫做网络流。</p><a id="more"></a><h3 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h3><hr><blockquote><p>最大流说简单点就是使从s到t的流量最大。这玩意儿需要注意几个事实（起点为s,终点为t）：<br><strong>每条边都有容量，当前的流量不可以超过流量；从s出来的流量等于流入t的流量；一般情况下点的容量是无限大的；s点与t点的容量无限大</strong></p></blockquote><p>有些东西就简写一下，待会看得懂就行：</p><ol><li><p>容量（c），每条边最大运输量。</p></li><li><p>流量（f），当前用了的运输量。</p></li><li><p>残量网络，即每一条路上容量与流量之差，必须为正数， <strong>若a-&gt;b的c为16，f为10 ，在残量网络中a-&gt;b为6还有一条边，b-&gt;a为10，有两条边！</strong> 因为可以当做b-&gt;a为容量0，流量-11。例如图（a）的残量网络为图（b）。（前一个数为流量，后一个数为容量）</p></li><li><p><img src="img\最大流问题Edmonds-Karp算法-1.png" alt=""></p></li><li><p>增广路，每次在图中找到一条满足上述基本事实的一条从s到t的路（这里用BFS找），这条路上贡献的流量就是其最小残量，每次找到一条路，就让答案加上最小残量，当没有增广路时，可以证明答案即为最优。</p></li></ol><h3 id="上代码"><a href="#上代码" class="headerlink" title="上代码"></a>上代码</h3><hr><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 1005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 2147483647</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> ret=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span>  ch=getchar();</span><br><span class="line"><span class="keyword">while</span>(ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>) &#123;<span class="keyword">if</span>(ch==<span class="string">'-'</span>)f=-f;ch=getchar();&#125;</span><br><span class="line"><span class="keyword">while</span>(ch&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>) ret=ret*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line"><span class="keyword">return</span> ret*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span><span class="comment">//用来维护每条边的信息 </span></span><br><span class="line"><span class="keyword">int</span> from,to,cap,flow;</span><br><span class="line">Edge(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> c,<span class="keyword">int</span> f):from(u),to(v),cap(c),flow(f)&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">EdmondsKarp</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> n,m,s,t;<span class="comment">//n:点数，m:边数，s:起点,t:终点 </span></span><br><span class="line"><span class="built_in">vector</span>&lt;Edge&gt; edges;<span class="comment">//边数开两倍（还有反向网络），这里偷一下懒 </span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[maxn];<span class="comment">//领接表，G[i][j]表示点i到延伸出去的第j条边在edges中的位置 </span></span><br><span class="line"><span class="keyword">int</span> a[maxn];<span class="comment">//最小残量，用以增广 </span></span><br><span class="line"><span class="keyword">int</span> p[maxn];<span class="comment">//p[i]表示到达节点i的那条边的编号，因为每次增广只增广一条路径，所以不用开二维 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;<span class="comment">//不多说，初始化 </span></span><br><span class="line">n=read();m=read();s=read();t=read();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) G[i].clear();</span><br><span class="line">edges.clear();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line"><span class="keyword">int</span> from=read(),to=read(),cap=read();</span><br><span class="line">edges.push_back(Edge(from,to,cap,<span class="number">0</span>));</span><br><span class="line">edges.push_back(Edge(to,from,<span class="number">0</span>,<span class="number">0</span>));<span class="comment">//反向网络 </span></span><br><span class="line"><span class="keyword">int</span> k=edges.size();</span><br><span class="line">G[from].push_back(k<span class="number">-2</span>);</span><br><span class="line">G[from].push_back(k<span class="number">-1</span>);  </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Maxflow</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> ret=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line"><span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="keyword">sizeof</span>(a));</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; Q;<span class="comment">//先进先出的队列 </span></span><br><span class="line">Q.push(s);</span><br><span class="line">a[s]=INF;</span><br><span class="line"><span class="keyword">while</span>(!Q.empty())&#123;<span class="comment">//里面就是在BFS </span></span><br><span class="line"><span class="keyword">int</span> x=Q.front();<span class="comment">//取队首 </span></span><br><span class="line">Q.pop();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;G[x].size();i++)&#123;</span><br><span class="line">Edge&amp; e=edges[G[x][i]];</span><br><span class="line"><span class="keyword">if</span>(!a[e.to]<span class="comment">/*网络流图不是完全图！*/</span>&amp;&amp;e.cap&gt;e.flow)&#123;</span><br><span class="line">p[e.to]=G[x][i];<span class="comment">//记住回去的路 </span></span><br><span class="line">a[e.to]=min(a[x],e.cap-e.flow);<span class="comment">//去最小残量 </span></span><br><span class="line">Q.push(e.to);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(a[t]) <span class="keyword">break</span>;<span class="comment">//此条路已到达t </span></span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">if</span>(!a[t]) <span class="keyword">break</span>;<span class="comment">//没有增广路时，即为最大流 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> u=t;u!=s;u=edges[p[u]].from)&#123;<span class="comment">//借助p数组倒回去给此次找到的增广路上的每条路的流量都加上最小残量a[t] </span></span><br><span class="line">edges[p[u]].flow+=a[t];</span><br><span class="line">edges[p[u]^<span class="number">1</span>].flow-=a[t];<span class="comment">//反向网络也要减掉a[t] </span></span><br><span class="line">&#125;</span><br><span class="line">ret+=a[t];<span class="comment">//答案加上最小残量a[t] </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line">&#125;ans;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">freopen(<span class="string">"ls.in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);</span><br><span class="line">ans.init();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>,ans.Maxflow());</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如有不正之处，欢迎神犇们来喷。 若要未经博主允许随意转载请随便。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;实现最大流有好几种算法，比如Dinic或者ISAP算法，Edmonds-Karp只是其中最好理解的一种算法，它的实现要运用到增广路与BFS，当然也可以用DFS，但效率太低。网络流这东西是用来求从s点到t点（起点为s，终点为t）的流量问题，因为类似网络数据传输，所以叫做网络流。&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="https://zwestcow.github.io/categories/algorithm/"/>
    
    
      <category term="算法" scheme="https://zwestcow.github.io/tags/algorithm/"/>
    
      <category term="最大流" scheme="https://zwestcow.github.io/tags/%E6%9C%80%E5%A4%A7%E6%B5%81/"/>
    
  </entry>
  
  <entry>
    <title>Example</title>
    <link href="https://zwestcow.github.io/example.html"/>
    <id>https://zwestcow.github.io/example.html</id>
    <published>2018-05-01T08:32:31.000Z</published>
    <updated>2018-05-01T08:49:31.518Z</updated>
    
    <content type="html"><![CDATA[<p>测试用页面<br><a id="more"></a></p><h1 id="测试一"><a href="#测试一" class="headerlink" title="测试一"></a>测试一</h1><hr><p>$E=mc^2$ </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pyqt</span><br></pre></td></tr></table></figure><p><del>删除线</del></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;测试用页面&lt;br&gt;
    
    </summary>
    
    
      <category term="示例" scheme="https://zwestcow.github.io/tags/example/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://zwestcow.github.io/hello-world.html"/>
    <id>https://zwestcow.github.io/hello-world.html</id>
    <published>2018-05-01T00:33:26.723Z</published>
    <updated>2018-05-01T08:48:36.956Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.<br><a id="more"></a></p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;br&gt;
    
    </summary>
    
    
      <category term="示例" scheme="https://zwestcow.github.io/tags/example/"/>
    
  </entry>
  
</feed>
