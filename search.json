[{"title":"最大流问题Edmonds-Karp算法","url":"/最大流问题Edmonds-Karp算法.html","content":"\n实现最大流有好几种算法，比如Dinic或者ISAP算法，Edmonds-Karp只是其中最好理解的一种算法，它的实现要运用到增广路与BFS，当然也可以用DFS，但效率太低。网络流这东西是用来求从s点到t点（起点为s，终点为t）的流量问题，因为类似网络数据传输，所以叫做网络流。\n\n<!-- more -->\n### 知识点\n---\n>最大流说简单点就是使从s到t的流量最大。这玩意儿需要注意几个事实（起点为s,终点为t）：\n**每条边都有容量，当前的流量不可以超过流量；从s出来的流量等于流入t的流量；一般情况下点的容量是无限大的；s点与t点的容量无限大**\n\n有些东西就简写一下，待会看得懂就行：\n\n1. 容量（c），每条边最大运输量。\n\n2. 流量（f），当前用了的运输量。\n\n3. 残量网络，即每一条路上容量与流量之差，必须为正数， **若a->b的c为16，f为10 ，在残量网络中a->b为6还有一条边，b->a为10，有两条边！** 因为可以当做b->a为容量0，流量-11。例如图（a）的残量网络为图（b）。（前一个数为流量，后一个数为容量）\n\n![](img\\最大流问题Edmonds-Karp算法-1.png)\n\n4. 增广路，每次在图中找到一条满足上述基本事实的一条从s到t的路（这里用BFS找），这条路上贡献的流量就是其最小残量，每次找到一条路，就让答案加上最小残量，当没有增广路时，可以证明答案即为最优。\n\n### 上代码\n---\n``` c++\n#include<queue>\n#include<cstdio>\n#include<vector>\n#include<cstring>\n#define maxn 1005\n#define INF 2147483647\nusing namespace std;\nint read(){\n\tint ret=0,f=1;char  ch=getchar();\n\twhile(ch<'0'||ch>'9') {if(ch=='-')f=-f;ch=getchar();}\n\twhile(ch>='0'&&ch<='9') ret=ret*10+ch-'0',ch=getchar();\n\treturn ret*f;\n}\nstruct Edge{//用来维护每条边的信息 \n\tint from,to,cap,flow;\n\tEdge(int u,int v,int c,int f):from(u),to(v),cap(c),flow(f){}\n};\nstruct EdmondsKarp{\n\tint n,m,s,t;//n:点数，m:边数，s:起点,t:终点 \n\tvector<Edge> edges;//边数开两倍（还有反向网络），这里偷一下懒 \n\tvector<int> G[maxn];//领接表，G[i][j]表示点i到延伸出去的第j条边在edges中的位置 \n\tint a[maxn];//最小残量，用以增广 \n\tint p[maxn];//p[i]表示到达节点i的那条边的编号，因为每次增广只增广一条路径，所以不用开二维 \n\tvoid init(){//不多说，初始化 \n\t\tn=read();m=read();s=read();t=read();\n\t\tfor(int i=0;i<n;i++) G[i].clear();\n\t\tedges.clear();\n\t\tfor(int i=1;i<=m;i++){\n\t\t\tint from=read(),to=read(),cap=read();\n\t\t\tedges.push_back(Edge(from,to,cap,0));\n\t\t\tedges.push_back(Edge(to,from,0,0));//反向网络 \n\t\t\tint k=edges.size();\n\t\t\tG[from].push_back(k-2);\n\t\t\tG[from].push_back(k-1);  \n\t\t}\n\t}\n\tint Maxflow(){\n\t\tint ret=0;\n\t\twhile(1){\n\t\t\tmemset(a,0,sizeof(a));\n\t\t\tqueue<int> Q;//先进先出的队列 \n\t\t\tQ.push(s);\n\t\t\ta[s]=INF;\n\t\t\twhile(!Q.empty()){//里面就是在BFS \n\t\t\t\tint x=Q.front();//取队首 \n\t\t\t\tQ.pop();\n\t\t\t\tfor(int i=0;i<G[x].size();i++){\n\t\t\t\t\tEdge& e=edges[G[x][i]];\n\t\t\t\t\tif(!a[e.to]/*网络流图不是完全图！*/&&e.cap>e.flow){\n\t\t\t\t\t\tp[e.to]=G[x][i];//记住回去的路 \n\t\t\t\t\t\ta[e.to]=min(a[x],e.cap-e.flow);//去最小残量 \n\t\t\t\t\t\tQ.push(e.to);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(a[t]) break;//此条路已到达t \n\t\t\t} \n\t\t\tif(!a[t]) break;//没有增广路时，即为最大流 \n\t\t\tfor(int u=t;u!=s;u=edges[p[u]].from){//借助p数组倒回去给此次找到的增广路上的每条路的流量都加上最小残量a[t] \n\t\t\t\tedges[p[u]].flow+=a[t];\n\t\t\t\tedges[p[u]^1].flow-=a[t];//反向网络也要减掉a[t] \n\t\t\t}\n\t\t\tret+=a[t];//答案加上最小残量a[t] \n\t\t}\n\t\treturn ret;\n\t}\n}ans;\nint main(){\n\tfreopen(\"ls.in\",\"r\",stdin);\n\tans.init();\n\tprintf(\"%d\",ans.Maxflow());\n\treturn 0;\n}\n```\n如有不正之处，欢迎神犇们来喷。 若要未经博主允许随意转载请随便。\n\n<!-- Gitalk 评论 start  -->\n\n<!-- Link Gitalk 的支持文件  -->\n<link rel=\"stylesheet\" href=\"https://unpkg.com/gitalk/dist/gitalk.css\">\n<script src=\"https://unpkg.com/gitalk@latest/dist/gitalk.min.js\"></script> \n<div id=\"gitalk-container\"></div>     <script type=\"text/javascript\">\n    var gitalk = new Gitalk({\n\t\tclientID: d0fb4a00b9f192ccae99,\n\t\tclientSecret: 246a3ea9f455565428fccc4648f18f2d0b9c571d,\n\t\trepo: https://zwestcow.github.io/,\n\t\towner: ZWestCow,\n\t\tadmin: [ZWestCow],\n    \n    });\n    gitalk.render(gitalk-container);\n</script> \n<!-- Gitalk end -->","tags":["最大流"],"categories":["算法"]},{"title":"Example","url":"/example.html","content":"测试用页面\n<!-- more -->\n\n# 测试一\n\n---\n\n$E=mc^2$ \n\n``` python\nimport pyqt\n```\n\n~~删除线~~","tags":["示例"]},{"title":"Hello World","url":"/hello-world.html","content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n<!-- more -->\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","tags":["示例"]}]